{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Header/Header.module.css","Components/Dialogs/DialogItem/DialogItem.module.css","Components/Dialogs/MessageItem/MessageItem.module.css","Components/Profile/Profile.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Settings/Settings.module.css","Components/Nav/Nav.module.css","Components/Nav/Nav.tsx","redux/Reducers/dialogs-reducer.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/MessageItem/MessageItem.tsx","Components/common/formComtrols/formControls.tsx","utils/validators/required.ts","utils/validators/maxLegth.ts","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirectComponent.tsx","Components/Dialogs/DialogsContainer.tsx","API/api.ts","redux/Reducers/users-reducer.tsx","Components/Users/UsersSearchForm.tsx","Components/common/Pagination/Pagination.tsx","files/images/user-default.png","Components/Users/User.tsx","Components/Users/Users.tsx","files/images/Preloader3.gif","Components/common/Preloader/Preloader.tsx","redux/selectors/users.selectors.ts","Components/Users/UsersContainer.tsx","Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","redux/Reducers/profile-reducer.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","redux/Reducers/auth-reducer.tsx","Components/Header/HeaderContainer.tsx","Components/Login/Login.tsx","Components/Settings/Settings.tsx","redux/Reducers/app-reducer.tsx","redux/Reducers/friendsBar-reducer.tsx","redux/redux-store.tsx","App.tsx","index.tsx","Components/common/formComtrols/formControl.module.css","Components/Dialogs/Dialogs.module.css","Components/Users/Users.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/common/Pagination/Pagination.module.css"],"names":["module","exports","Nav","className","classes","nav","item","to","activeClassName","activeLink","active","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","type","body","newDialogMessage","DialogItem","props","Path","dialog","MessageItem","FormControl","input","meta","touched","error","children","hasError","s","formControl","errorMessage","TextArea","restProps","Input","required","value","console","log","maxLengthCreator","MaxLength","toString","length","Dialogs","dialogsElements","dialogsPage","map","d","v1","messagesElements","m","DialogsItems","AddMessageFormRedux","onSubmit","formData","sendMessage","maxLength","reduxForm","form","handleSubmit","Field","placeholder","component","validate","mapStateToPropsRedirect","isAuth","authSetting","withAuthRedirectComponent","Component","connect","compose","dispatch","sendNewDialogMessageAC","baseAxiosSettings","axios","create","baseURL","withCredentials","headers","requestUsers","currentPage","pageSize","term","friend","get","then","res","data","showUser","userId","profileAPI","getProfile","getStatus","updateStatus","status","put","updatePhoto","selectedFile","FormData","append","authAPI","email","password","rememberMe","post","delete","secureAPI","users","totalUsersAmount","isFetching","followedUsersId","filter","usersReducer","u","userID","followed","payload","totalAmount","followAC","unFollowAC","setCurrentPage","switchPreloader","followedUsersIdAC","setFilterAC","usersSearchFormValidate","values","UsersSearchForm","React","memo","initialValues","setSubmitting","onFilterChanged","isSubmitting","as","disabled","Pagination","totalItemsAmount","onPageNumberChange","numberOfPagesInOnePortion","totalAmountOfPages","Math","ceil","pages","i","push","numberOfPortions","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","onClick","p","cn","selectedPage","pageNumber","User","user","unFollowUserTC","followUserTC","src","photos","small","userPhoto","photo","alt","some","Users","Preloader","preloader","Preloader3","getUsersSuper","createSelector","usersPage","getPageSize","getTotalUsersAmount","getCurrentPage","getIsFetching","getFollowedUsersId","getFilter","UsersContainer","getUsersTC","this","follow","unfollow","page","a","response","items","totalCount","resultCode","ProfileStatus","editMode","setEditMode","setStatus","useEffect","setEditModeOnClick","onChange","e","newStatus","currentTarget","onBlur","updateUserStatusTC","onKeyPress","key","autoFocus","onDoubleClick","ProfileInfo","profile","Object","prototype","hasOwnProperty","call","isProfileEmpty","descriptionBlock","isOwner","target","files","savePhotoTC","fullName","posts","likesCounter","profileReducer","newPost","setUserStatus","Post","MyPosts","postsElements","reverse","postsBlock","NewPostReduxForm","addPost","maxLength20","MyPostsContainerWithConnect","profilePage","addPostAC","Profile","content","MyPostsContainer","ProfileContainer","match","params","authorizedUserId","history","showUserTC","getUserStatusTC","refreshProfile","prevProps","withRouter","Header","header","authBlock","login","logOutTC","captchaUrl","authReducer","url","setUserDataAC","authMeTC","getCaptchaTC","captcha","HeaderContainer","loginTC","stopSubmit","_error","ReduxLoginForm","href","rel","Settings","onClickHandler","putStatus","r","set","isInitialized","appReducer","friends","avatar","friendsBarReducer","mainReducer","combineReducers","friendsBar","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","App","initializeTC","path","render","DialogsContainer","AppContainer","promiseAuthMe","Promise","all","SocialNetworkApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b4fb23e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3aeho\",\"posts\":\"MyPosts_posts__2Byu-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__39XS2\",\"authBlock\":\"Header_authBlock__3JFA1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"DialogItem_Dialogs__2c_QI\",\"DialogsItems\":\"DialogItem_DialogsItems__3zAIO\",\"dialog\":\"DialogItem_dialog__1wSkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"MessageItem_messages__1BV8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__6pham\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3c7es\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"set\":\"Settings_set__3Diid\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3FUyC\",\"item\":\"Nav_item__3iLxv\",\"activeLink\":\"Nav_activeLink__V6QwG\"};","import React from 'react';\r\nimport classes from './Nav.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/login\" activeClassName={classes.activeLink}>Login</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settings\" activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/friends\" activeClassName={classes.activeLink}>Friends</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import {AllACType} from \"../redux-store\";\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type MessagesType = Array<MessageType>\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type DialogsType = Array<DialogType>\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: DialogsType\r\n    messages: MessagesType\r\n}\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Alex\"},\r\n        {id: 2, name: \"Kate\"},\r\n        {id: 3, name: \"Bob\"},\r\n        {id: 4, name: \"Michael\"},\r\n        {id: 5, name: \"Kostya\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi there\"},\r\n        {id: 2, message: \"Hello bud\"},\r\n        {id: 3, message: \"Howdy\"},\r\n        {id: 4, message: \"Greetings!\"},\r\n        {id: 5, message: \"Did you sign up for Stalker 2?\"},\r\n    ],\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: AllACType): DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case 'dialog/SEND_MESSAGE': {\r\n            let body = action.newDialogMessage\r\n            return {...state, messages: [...state.messages, {id: 6, message: body}]}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport const sendNewDialogMessageAC = (newDialogMessage: string) => {\r\n    return {\r\n        type: 'dialog/SEND_MESSAGE',\r\n        newDialogMessage\r\n    } as const\r\n}","import React from 'react';\r\nimport classes from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { DialogType } from '../../../redux/Reducers/dialogs-reducer';\r\n\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let Path = `/dialogs/${props.id}`;\r\n    return <div className={classes.dialog}>\r\n        <NavLink to={Path}> {props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport { MessageType } from '../../../redux/Reducers/dialogs-reducer';\r\nimport classes from './MessageItem.module.css'\r\n\r\n\r\nconst MessageItem = (props: MessageType) => {\r\n    return <div className={classes.message}>\r\n        {props.message}\r\n    </div>\r\n}\r\n\r\n\r\nexport default MessageItem;\r\n","import React from \"react\";\r\nimport s from './formControl.module.css'\r\n\r\ntype TextAreaPropsType = {\r\n    input: any //fix\r\n    meta: any  //fix\r\n}\r\n\r\nexport const FormControl: React.FC<TextAreaPropsType> = ({\r\n                                                             input,\r\n                                                             meta: {touched, error},\r\n                                                             children,\r\n                                                             ...props\r\n                                                         }) => { //FC?\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <div className={s.errorMessage}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<TextAreaPropsType> = (props) => { //FC?\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<TextAreaPropsType> = (props) => { //FC?\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\n","export const required = (value: unknown) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    const error = 'The field is empty'\r\n    console.log(error)\r\n    return error\r\n}","\r\nexport const maxLengthCreator = (MaxLength: number) => (value: string | number | symbol) => {\r\n    if (value && value.toString().length <= MaxLength) {\r\n        return undefined\r\n    }\r\n    const error = `${MaxLength} is a max number of symbols here`\r\n    console.log(error)\r\n    return error\r\n}\r\n","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport {v1} from 'uuid';\r\nimport {DialogsPageType} from \"../../redux/Reducers/dialogs-reducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport { TextArea } from '../common/formComtrols/formControls';\r\nimport {required} from \"../../utils/validators/required\";\r\nimport { maxLengthCreator } from '../../utils/validators/maxLegth';\r\n\r\nexport type DialogsPagePropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype DialogFormDataType = {\r\n    newDialogMessage: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPagePropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={v1()} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map(m => <MessageItem key={v1()} message={m.message} id={m.id}/>)\r\n\r\n    const addNewMessage = (formData: DialogFormDataType) => {\r\n        props.sendMessage(formData.newDialogMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Dialogs}>\r\n            <div className={classes.DialogsItems + '' + classes.active}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Dialogs;\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nexport const DialogsForm: React.FC<InjectedFormProps<DialogFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'insert your message'}\r\n                       name={'newDialogMessage'} component={TextArea}\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<DialogFormDataType>({\r\n    form: 'dialogAddMessageForm'\r\n})(DialogsForm)","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {APPStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsRedirect = (state: APPStateType): mapStateToPropsType => ({\r\n    isAuth: state.authSetting.isAuth\r\n})\r\n\r\nexport function withAuthRedirectComponent<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: mapStateToPropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import {DialogsPageType, sendNewDialogMessageAC} from \"../../redux/Reducers/dialogs-reducer\"\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {APPStateType} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\r\n\r\nexport type mapDispatchToPropsType = {\r\n    sendMessage: (newDialogMessage: string) => void\r\n}\r\n\r\nexport type mapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: APPStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newDialogMessage) => {\r\n            dispatch(sendNewDialogMessageAC(newDialogMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirectComponent\r\n)(Dialogs)\r\n\r\n/*let AuthRedirectComponent = withAuthRedirectComponent(Dialogs)\r\n\r\nconst DialogsCompWithConnectFunc = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default DialogsCompWithConnectFunc;*/\r\n","import axios from \"axios\";\r\nimport {UpdateUserPhotoType, UpdateUserStatusType, UserProfileType} from \"../redux/Reducers/profile-reducer\";\r\nimport {AuthUserType, ResponseCaptchaType, ResponseType} from \"../redux/Reducers/auth-reducer\";\r\n\r\nconst baseAxiosSettings = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ae005362-3cd1-4901-a9c5-790f2698eec1'\r\n    },\r\n})\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number, term: string = '', friend: null | boolean = null) => {\r\n    return baseAxiosSettings.get(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `${friend}`))\r\n        .then(res => res.data)\r\n}\r\n\r\nexport const unFollow = (id: number) => {\r\n    return baseAxiosSettings.delete(`follow/${id}`)\r\n        .then(res => res.data)\r\n}\r\n\r\nexport const follow = (id: number) => {\r\n    return baseAxiosSettings.post(`follow/${id}`, {})\r\n        .then(res => res.data)\r\n}\r\n\r\nexport const putStatus = (status: string) => {\r\n    return baseAxiosSettings.put(`profile/status`, {status})\r\n        .then(res => {\r\n            console.log(res.data)})\r\n}\r\n\r\nexport const showUser = (userId: number) => {\r\n    return profileAPI.getProfile(userId)\r\n}\r\n\r\n\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return baseAxiosSettings.get<UserProfileType>(`profile/` + userId)\r\n            .then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return baseAxiosSettings.get<string>(`profile/status/` + userId)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return baseAxiosSettings.put<UpdateUserStatusType>(`profile/status/`, {status})\r\n            .then(res => res.data)\r\n    },\r\n    updatePhoto(selectedFile: string | Blob) {\r\n        const formData = new FormData()\r\n        formData.append('image', selectedFile)\r\n        return baseAxiosSettings.put<UpdateUserPhotoType>(`profile/photo/`, formData, {\r\n            headers: {\r\n                'Content-type':'multipart/form-data'\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login (email: string, password: string, rememberMe = false) {\r\n        return baseAxiosSettings.post<ResponseType<{userId: string}>>(`auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    authMe () {\r\n        return baseAxiosSettings.get<ResponseType<AuthUserType>>(`auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    logOut() {\r\n        return baseAxiosSettings.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const secureAPI = {\r\n    getCaptcha () {\r\n        return baseAxiosSettings.get<ResponseCaptchaType>(`security/get-captcha-url`)\r\n    }\r\n}","import {follow, requestUsers, unFollow} from \"../../API/api\";\r\nimport {AllACType} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\nexport type FilterFormType = typeof initialState.filter\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersAmount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followedUsersId: number[]\r\n    filter: {\r\n        term: string\r\n        friend: null | boolean\r\n    }\r\n\r\n}\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 8,\r\n    totalUsersAmount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followedUsersId: [],\r\n    filter: {\r\n        term: '',\r\n        friend: null,\r\n    }\r\n}\r\n\r\nconst usersReducer = (state: UsersPageType = initialState, action: AllACType): UsersPageType => {\r\n\r\n    switch (action.type) {\r\n        case 'users/FOLLOW': {\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n        }\r\n        case 'users/UNFOLLOW': {\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n        }\r\n        case 'users/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'users/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'users/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'users/SET_TOTAL_USERS_AMOUNT': {\r\n            return {...state, totalUsersAmount: action.totalAmount}\r\n        }\r\n        case 'users/SWITCH_PRELOADER': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'users/SWITCH_IS_FOLLOW': {\r\n            return {\r\n                ...state,\r\n                followedUsersId: action.isFetching\r\n                    ? [...state.followedUsersId, action.id]\r\n                    : state.followedUsersId.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n\r\nexport const followAC = (userID: number) => {\r\n    return {\r\n        type: 'users/FOLLOW',\r\n        userID,\r\n    } as const\r\n}\r\n\r\nexport const unFollowAC = (userID: number) => {\r\n    return {\r\n        type: 'users/UNFOLLOW',\r\n        userID,\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>) => {\r\n\r\n    return {\r\n        type: 'users/SET_USERS',\r\n        users,\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: 'users/SET_CURRENT_PAGE',\r\n        currentPage,\r\n    } as const\r\n}\r\n\r\nexport const setTotalUsersAmount = (totalAmount: number) => {\r\n    return {\r\n        type: 'users/SET_TOTAL_USERS_AMOUNT',\r\n        totalAmount,\r\n    } as const\r\n}\r\n\r\nexport const switchPreloader = (isFetching: boolean) => {\r\n    return {\r\n        type: 'users/SWITCH_PRELOADER',\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const followedUsersIdAC = (id: number, isFetching: boolean) => {\r\n    return {\r\n        type: 'users/SWITCH_IS_FOLLOW',\r\n        id,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const setFilterAC = (filter: FilterFormType) => {\r\n    return {\r\n        type: 'users/SET_FILTER',\r\n        payload: filter,\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUsersTC = (page: number, pageSize: number, filter: FilterFormType) => async (dispatch: Dispatch) => {\r\n    dispatch(switchPreloader(true))\r\n    dispatch(setFilterAC(filter))\r\n    dispatch(setCurrentPage(page))\r\n    let response = await requestUsers(page, pageSize, filter.term, filter.friend)\r\n            dispatch(switchPreloader(false))\r\n            dispatch(setUsers(response.items))\r\n            dispatch(setTotalUsersAmount(response.totalCount))\r\n}\r\n\r\n\r\nexport const followUserTC = (userId: number) => async (dispatch: Dispatch) => {\r\n    dispatch(followedUsersIdAC(userId, true))\r\n    let response = await follow(userId)\r\n            if (response.resultCode === 0) {\r\n                dispatch(followAC(userId))\r\n            }\r\n            dispatch(followedUsersIdAC(userId, false))\r\n}\r\n\r\nexport const unFollowUserTC = (userId: number) => async (dispatch: Dispatch) => {\r\n    dispatch(followedUsersIdAC(userId, true))\r\n   let response = await unFollow(userId)\r\n            if (response.resultCode === 0) {\r\n                dispatch(unFollowAC(userId))\r\n            }\r\n            dispatch(followedUsersIdAC(userId, false))\r\n}","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterFormType} from \"../../redux/Reducers/users-reducer\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterFormType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo((props) => {\r\n\r\n    const submit = (values: FilterFormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        props.onFilterChanged(values)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            initialValues={{term: '', friend: null}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Friends</option>\r\n                        <option value=\"false\">Unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","import React, {useState} from \"react\";\r\nimport s from './Pagination.module.css';\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype PaginationPropsType = {\r\n    totalItemsAmount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageNumberChange: (p: number) => void\r\n    numberOfPagesInOnePortion: number\r\n\r\n}\r\n\r\nlet Pagination = ({\r\n                      totalItemsAmount,\r\n                      pageSize,\r\n                      currentPage,\r\n                      onPageNumberChange,\r\n                      numberOfPagesInOnePortion = 8,\r\n                      ...props\r\n                  }: PaginationPropsType) => {\r\n\r\n    let totalAmountOfPages = Math.ceil(totalItemsAmount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= totalAmountOfPages; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let numberOfPortions = Math.ceil(totalAmountOfPages / numberOfPagesInOnePortion)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * numberOfPagesInOnePortion + 1\r\n    let rightPortionPageNumber = portionNumber * numberOfPagesInOnePortion\r\n\r\n    return (\r\n\r\n        <div className={s.pagination}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span key={p} className={cn({\r\n                        [s.selectedPage]: currentPage === p\r\n                    }, s.pageNumber)}\r\n                                 onClick={() => {\r\n                                     onPageNumberChange(p)\r\n                                 }}>{p} </span>\r\n                })}\r\n\r\n            {numberOfPortions > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>next</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination","export default __webpack_public_path__ + \"static/media/user-default.45338af4.png\";","import React from \"react\";\r\nimport {UserType} from \"../../redux/Reducers/users-reducer\";\r\nimport s from './Users.module.css'\r\nimport userPhoto from './../../files/images/user-default.png'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followedUsersId: number[]\r\n    followUserTC: (userId: number, isFetching: boolean) => void\r\n    unFollowUserTC: (userId: number, isFetching: boolean) => void\r\n}\r\n\r\nlet User = ({user, followedUsersId, unFollowUserTC, followUserTC, ...props}: UserPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                        <div>\r\n                            <NavLink to={'/Profile/' + user.id}>\r\n                            <img src={user.photos.small !== null ? user.photos.small : userPhoto} className={s.photo}\r\n                                 alt='Users avatar'/>\r\n                                </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {user.followed\r\n                                ? <button disabled={followedUsersId.some(id => id === user.id)} onClick={() => {\r\n                                    unFollowUserTC(user.id, true)\r\n                                }}>Unfollow</button>\r\n                                : <button disabled={followedUsersId.some(id => id === user.id)} onClick={() => {\r\n                                    followUserTC(user.id, true)\r\n                                }}>Follow</button>}\r\n                        </div>\r\n            </span>\r\n            <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n            <span>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React from \"react\";\r\nimport {FilterFormType, UserType} from \"../../redux/Reducers/users-reducer\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport Pagination from \"../common/Pagination/Pagination\";\r\nimport User from \"./User\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    totalUsersAmount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageNumberChange: (p: number) => void\r\n    followedUsersIdAC: (id: number, isFetching: boolean) => void\r\n    followedUsersId: number[]\r\n    isFetching: boolean\r\n    followUserTC: (userId: number, isFetching: boolean) => void\r\n    unFollowUserTC: (userId: number, isFetching: boolean) => void\r\n    onFilterChanged: (filter: FilterFormType) => void\r\n}\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n\r\n    return <div>\r\n        <UsersSearchForm onFilterChanged={props.onFilterChanged}/>\r\n        <Pagination totalItemsAmount={props.totalUsersAmount}\r\n                    pageSize={props.pageSize}\r\n                    currentPage={props.currentPage}\r\n                    onPageNumberChange={props.onPageNumberChange}\r\n                    numberOfPagesInOnePortion={8}\r\n        />\r\n        {\r\n            props.users.map(u => <User key={u.id} user={u}\r\n                                       followedUsersId={props.followedUsersId}\r\n                                       followUserTC={props.followUserTC}\r\n                                       unFollowUserTC={props.unFollowUserTC}\r\n            />)\r\n        }\r\n    </div>\r\n}\r\nexport default Users","export default __webpack_public_path__ + \"static/media/Preloader3.dd13dbe9.gif\";","import s from \"../../Users/Users.module.css\";\r\nimport Preloader3 from \"../../../files/images/Preloader3.gif\";\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img className={s.preloader} src={Preloader3} alt={'preloader'}/>\r\n    )\r\n}\r\n\r\nexport default Preloader","import {APPStateType} from \"../redux-store\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UserType} from \"../Reducers/users-reducer\";\r\n\r\nexport const getUsers = (state: APPStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSuper = createSelector(getUsers, (users: Array<UserType>) => {\r\n    return users\r\n})\r\n\r\nexport const getPageSize = (state: APPStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersAmount = (state: APPStateType) => {\r\n    return state.usersPage.totalUsersAmount\r\n}\r\n\r\nexport const getCurrentPage = (state: APPStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: APPStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowedUsersId = (state: APPStateType) => {\r\n    return state.usersPage.followedUsersId\r\n}\r\n\r\nexport const getFilter = (state: APPStateType) => {\r\n    return state.usersPage.filter\r\n}","import {connect} from \"react-redux\";\r\nimport {\r\n    FilterFormType,\r\n    followAC,\r\n    followedUsersIdAC,\r\n    followUserTC,\r\n    getUsersTC,\r\n    setCurrentPage,\r\n    unFollowAC,\r\n    unFollowUserTC,\r\n    UserType\r\n} from \"../../redux/Reducers/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\r\nimport {compose} from \"redux\";\r\nimport {APPStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getCurrentPage,\r\n    getFilter,\r\n    getFollowedUsersId,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersAmount,\r\n    getUsersSuper\r\n} from \"../../redux/selectors/users.selectors\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersAmount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followedUsersId: number[]\r\n    filter: FilterFormType\r\n}\r\n\r\nexport type UsersPropsType = {\r\n    users: Array<UserType>\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    pageSize: number\r\n    totalUsersAmount: number\r\n    currentPage: number\r\n    setCurrentPage: (currentPage: number) => void\r\n    isFetching: boolean\r\n    followedUsersIdAC: (id: number, isFetching: boolean) => void\r\n    followedUsersId: number[]\r\n    getUsersTC: (currentPage: number, pageSize: number, filter: FilterFormType) => void\r\n    followUserTC: (userId: number, isFetching: boolean) => void\r\n    unFollowUserTC: (userId: number, isFetching: boolean) => void\r\n    filter: FilterFormType\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        let {currentPage, pageSize, filter} = this.props\r\n        this.props.getUsersTC(currentPage, pageSize, filter)\r\n    }\r\n\r\n    onPageNumberChange = (pageNumber: number) => {\r\n        const {pageSize, filter} = this.props\r\n        this.props.getUsersTC(pageNumber, pageSize, filter)\r\n    }\r\n\r\n    onFilterChanged = (filter: FilterFormType) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsersTC(1, pageSize, filter)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : ''}\r\n            <Users totalUsersAmount={this.props.totalUsersAmount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   users={this.props.users}\r\n                   onPageNumberChange={this.onPageNumberChange}\r\n                   followedUsersIdAC={this.props.followedUsersIdAC}\r\n                   followedUsersId={this.props.followedUsersId}\r\n                   isFetching={this.props.isFetching}\r\n                   followUserTC={this.props.followUserTC}\r\n                   unFollowUserTC={this.props.unFollowUserTC}\r\n                   onFilterChanged={this.onFilterChanged}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: APPStateType): mapStateToPropsType => {\r\n\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersAmount: getTotalUsersAmount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followedUsersId: getFollowedUsersId(state),\r\n        filter: getFilter(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow: followAC,\r\n        unfollow: unFollowAC,\r\n        setCurrentPage,\r\n        followedUsersIdAC,\r\n        getUsersTC,\r\n        followUserTC,\r\n        unFollowUserTC\r\n    }),\r\n    withAuthRedirectComponent\r\n)(UsersContainer)\r\n","import {ChangeEvent, KeyboardEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatusTC: (status: string) => void\r\n}\r\n\r\nfunction ProfileStatus(props: ProfileStatusPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const setStatusOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStatus = e.currentTarget.value\r\n        setStatus(newStatus)\r\n    }\r\n\r\n    const onKeyPressStatusHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.updateUserStatusTC(status)\r\n        }\r\n    }\r\n\r\n    const setEditModeOnClick = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const setViewMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatusTC(status)\r\n    }\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {editMode ?\r\n                <input value={status}\r\n                       onChange={setStatusOnChangeHandler}\r\n                       onBlur={setViewMode}\r\n                       onKeyPress={onKeyPressStatusHandler}\r\n                       autoFocus/>\r\n                :\r\n                <span onDoubleClick={setEditModeOnClick}>{status ? status : props.status}</span>\r\n            }\r\n            {!status && !props.status && <span onDoubleClick={setEditModeOnClick}>Status is empty</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import React, {ChangeEvent} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {UserProfileType} from \"../../../redux/Reducers/profile-reducer\";\r\nimport userPhoto from \"../../../files/images/user-default.png\";\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\ntype PropsType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    updateUserStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savePhotoTC: (selectedFile: string | Blob) => void\r\n}\r\n\r\nconst ProfileInfo = (props: PropsType) => {\r\n\r\n    const isProfileEmpty = (profile: {} | UserProfileType): boolean => {\r\n        for (const key in profile) {\r\n            if (Object.prototype.hasOwnProperty.call(profile, key)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    if (isProfileEmpty(props.profile)) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onAvatarUploader = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files!.length) {\r\n            const selectedFile=e.target.files![0]\r\n            props.savePhotoTC(selectedFile)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.small !== null ? props.profile.photos.small : userPhoto}\r\n                     alt={'users avatar'}/>\r\n                {!props.isOwner && <input type={'file'} onChange={onAvatarUploader}/>}\r\n                <div>{props.profile.fullName}</div>\r\n                <span>My status:</span> <ProfileStatus status={props.status}\r\n                                                       updateUserStatusTC={props.updateUserStatusTC}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default ProfileInfo;\r\n","import {AllACType} from \"../redux-store\";\r\nimport {Nullable} from '../../types';\r\nimport {profileAPI, showUser} from \"../../API/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCounter: number\r\n}\r\n\r\nexport type UserProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: Nullable<string>\r\n        website: Nullable<string>\r\n        vk: Nullable<string>\r\n        twitter: Nullable<string>\r\n        instagram: Nullable<string>\r\n        youtube: Nullable<string>\r\n        github: Nullable<string>\r\n        mainLink: Nullable<string>\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type UpdateUserStatusType = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: string\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type UpdateUserPhotoType = {\r\n    data: {\r\n        photos: PhotosType\r\n    }\r\n    resultCode: number\r\n    fieldsErrors: []\r\n    messages: string[]\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    profile: UserProfileType\r\n    status: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCounter: 15},\r\n        {id: 2, message: 'Fine, thanks', likesCounter: 25},\r\n        {id: 3, message: 'WHOOP WHOOP!', likesCounter: 48},\r\n    ],\r\n    profile: {} as UserProfileType,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: AllACType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case 'profile/ADD_POST': {\r\n            let newPost: PostType = {\r\n                id: 5,\r\n                message: action.newPost,\r\n                likesCounter: 0\r\n            }\r\n            return {...state, posts: [...state.posts, newPost]};\r\n        }\r\n        case 'profile/SET_USERS-PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'profile/SET_USERS_STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'profile/UPDATE_PHOTO': {\r\n          return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n\r\nexport const addPostAC = (newPost: string) => {\r\n    return {\r\n        type: 'profile/ADD_POST',\r\n        newPost\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: UserProfileType) => {\r\n    return {\r\n        type: 'profile/SET_USERS-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: 'profile/SET_USERS_STATUS',\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const updatePhotoAC = (photos: PhotosType) => {\r\n    return {\r\n        type: 'profile/UPDATE_PHOTO',\r\n        photos\r\n    } as const\r\n}\r\n\r\n\r\nexport const showUserTC = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await showUser(userId)\r\n    dispatch(setUserProfile(response))\r\n}\r\n\r\nexport const getUserStatusTC = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(response))\r\n}\r\n\r\nexport const updateUserStatusTC = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.resultCode === 0) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhotoTC = (selectedFile: string | Blob) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updatePhoto(selectedFile)\r\n    if (response.resultCode === 0) {\r\n        dispatch(updatePhotoAC(response.data.photos))\r\n    }\r\n}","import React from 'react';\r\nimport { PostType } from '../../../../redux/Reducers/profile-reducer';\r\nimport classes from './Post.module.css';\r\n\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            {props.id + '. '}{props.message}\r\n            <div>\r\n                <span>likes </span>{props.likesCounter}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {v1} from 'uuid';\r\nimport {PostType} from \"../../../redux/Reducers/profile-reducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/required\";\r\nimport {maxLengthCreator} from \"../../../utils/validators/maxLegth\";\r\nimport {TextArea} from \"../../common/formComtrols/formControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\ntype NewPostFormDataType = {\r\n    newPost: string\r\n}\r\n\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = [...props.posts].reverse().map(m => <Post key={v1()} message={m.message}\r\n                                                   likesCounter={m.likesCounter}\r\n                                                   id={m.id}/>)\r\n\r\n    const addNewPost = (values: NewPostFormDataType) => {\r\n        props.addPost(values.newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <NewPostReduxForm onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\n\r\n\r\nconst maxLength20 = maxLengthCreator(20)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<NewPostFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'newPost'} component={TextArea} validate={[required, maxLength20]}/>\r\n            <div>\r\n                <button>\r\n                    Add post\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewPostReduxForm = reduxForm<NewPostFormDataType>({\r\n    form: 'newPost'\r\n})(AddNewPostForm)","import {addPostAC, PostType} from \"../../../redux/Reducers/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {APPStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nexport type mapDispatchToPropsType = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nexport type mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: APPStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            let action = addPostAC(newPost)\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainerWithConnect = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainerWithConnect;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport classes from './Profile.module.css'\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/Reducers/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    updateUserStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savePhotoTC: (selectedFile: string | Blob) => void\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return (\r\n        <div className={classes.content}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateUserStatusTC={props.updateUserStatusTC}\r\n                         isOwner={props.isOwner}\r\n                         savePhotoTC={props.savePhotoTC}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserStatusTC, showUserTC, updateUserStatusTC, UserProfileType, savePhotoTC} from \"../../redux/Reducers/profile-reducer\";\r\nimport {APPStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\r\nimport {compose} from \"redux\";\r\nimport {Nullable} from \"../../types\";\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype MainPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype MSTPType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    authorizedUserId: Nullable<number>\r\n    isAuth: boolean\r\n}\r\n\r\ntype MDTPType = {\r\n    showUserTC: (userId: number) => void\r\n    getUserStatusTC: (userId: number) => void\r\n    updateUserStatusTC: (status: string) => void\r\n    savePhotoTC: (selectedFile: string | Blob) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = MSTPType & MDTPType\r\n\r\nclass ProfileContainer extends React.Component<MainPropsType> {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.match.params.userId\r\n        console.log(userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId!.toString()\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.showUserTC(+userId)\r\n        this.props.getUserStatusTC(+userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: { match: { params: { userId: string | undefined; }; }; }) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner = {!!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatusTC={this.props.updateUserStatusTC}\r\n                     savePhotoTC={this.props.savePhotoTC}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: APPStateType): MSTPType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.authSetting.id,\r\n    isAuth: state.authSetting.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MSTPType, MDTPType, {}, APPStateType>(\r\n        mapStateToProps, {showUserTC, getUserStatusTC, updateUserStatusTC, savePhotoTC}),\r\n    withRouter,\r\n    withAuthRedirectComponent\r\n)(ProfileContainer)\r\n\r\n/*\r\nlet AuthRedirectComponent = withAuthRedirectComponent(ProfileContainer)\r\n\r\n\r\nlet DataFromURLContainerComp = withRouter(AuthRedirectComponent)\r\n\r\nexport default connect<MSTPType, MDTPType, {}, APPStateType>(\r\n    mapStateToProps, {\r\n        showUserTC\r\n    }\r\n)(DataFromURLContainerComp);\r\n*/\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {Nullable} from \"../../types\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: Nullable<string>\r\n    logOutTC: () => void\r\n}\r\n\r\nconst Header = (props: PropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/640px-React-icon.svg.png'\r\n                 alt={'logo'}/>\r\n            <div className={s.authBlock}>\r\n                {props.isAuth ? <div>{props.login}\r\n                        <button onClick={props.logOutTC}>Log out</button>\r\n                    </div> :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import {Nullable} from \"../../types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, secureAPI} from \"../../API/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {APPStateType} from \"../redux-store\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\n\r\nexport type AuthUserType = {\r\n    email: Nullable<string>\r\n    id: Nullable<number>\r\n    login: Nullable<string>\r\n    isAuth: boolean\r\n    captchaUrl: Nullable<string>\r\n}\r\n\r\nlet initialState: AuthUserType = {\r\n    email: null,\r\n    id: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport type ResponseCaptchaType = {\r\n    url: string\r\n}\r\n\r\n\r\nconst authReducer = (state: AuthUserType = initialState, action: AllAuthReducerACType): AuthUserType => {\r\n\r\n    switch (action.type) {\r\n        case 'auth/SET_USER_DATA': {\r\n            let a = {...state, ...action.data} //var is used here for an access to debugger isAuth??\r\n            return a\r\n        }\r\n        case 'auth/GET_CAPTCHA': {\r\n            return {...state, captchaUrl: action.url}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype AllAuthReducerACType = setUserDataACType | getCaptchaACType\r\n\r\ntype setUserDataACType = ReturnType<typeof setUserDataAC>\r\n\r\nexport const setUserDataAC = (data: AuthUserType) => {\r\n    return {\r\n        type: 'auth/SET_USER_DATA',\r\n        data,\r\n    } as const\r\n}\r\n\r\ntype getCaptchaACType = ReturnType<typeof getCaptchaAC>\r\n\r\nexport const getCaptchaAC = (url: string) => {\r\n    return {\r\n        type: 'auth/GET_CAPTCHA',\r\n        url\r\n    } as const\r\n}\r\n\r\nexport const authMeTC = () => async (dispatch: Dispatch<AllAuthReducerACType>) => {\r\n    let response = await authAPI.authMe()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setUserDataAC({\r\n            login: response.data.login,\r\n            id: response.data.id,\r\n            email: response.data.email,\r\n            isAuth: true,\r\n            captchaUrl: null\r\n        }))\r\n    }\r\n}\r\n\r\n//dispatch: Dispatch<AllAuthReducerACType>\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => async (dispatch: ThunkDispatch<APPStateType, unknown, AllAuthReducerACType | FormAction>) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n    if (response.resultCode === 0) {\r\n        dispatch(authMeTC())\r\n    } else {\r\n        if(response.resultCode === 10) {\r\n            dispatch(getCaptchaTC())\r\n        }\r\n        if (response.messages[0].length > 0) {\r\n            dispatch(stopSubmit('login', {_error: response.messages[0]}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logOutTC = () => async (dispatch: ThunkDispatch<APPStateType, unknown, AllAuthReducerACType>) => {\r\n    let response = await authAPI.logOut()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUserDataAC({login: null, id: null, email: null, isAuth: false, captchaUrl: null}))\r\n    }\r\n}\r\n\r\nexport const getCaptchaTC = () => async (dispatch: ThunkDispatch<APPStateType, unknown, AllAuthReducerACType>) => {\r\n    let response = await secureAPI.getCaptcha()\r\n    if (response.data.url) {\r\n        const captcha = response.data.url\r\n        dispatch(getCaptchaAC(captcha))\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logOutTC} from \"../../redux/Reducers/auth-reducer\";\r\nimport {Nullable} from \"../../types\";\r\nimport {APPStateType} from \"../../redux/redux-store\";\r\n\r\ntype AuthPropsType = MSTPType & MDTPType\r\n\r\ntype MSTPType = {\r\n    isAuth: boolean\r\n    login: Nullable<string>\r\n}\r\n\r\ntype MDTPType = {\r\n    logOutTC: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: APPStateType): MSTPType => ({\r\n    isAuth: state.authSetting.isAuth,\r\n    login: state.authSetting.login,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {logOutTC})(HeaderContainer);\r\n","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Input} from \"../common/formComtrols/formControls\";\r\nimport {required} from \"../../utils/validators/required\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/Reducers/auth-reducer\";\r\nimport {APPStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from \"./../common/formComtrols/formControl.module.css\"\r\nimport {Nullable} from \"../../types\";\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    url: Nullable<string>\r\n}\r\n\r\ntype LoginPropsType = mapStateToPropsLoginType & mapDispatchToPropsLoginType\r\n\r\ntype mapStateToPropsLoginType = {\r\n    isAuth: boolean\r\n    url: Nullable<string>\r\n}\r\ntype mapDispatchToPropsLoginType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    return (\r\n        <>\r\n            <h2>Hello there!</h2>\r\n            <ReduxLoginForm onSubmit={onSubmit} />\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: APPStateType): mapStateToPropsLoginType => ({\r\n    isAuth: state.authSetting.isAuth,\r\n    url: state.authSetting.captchaUrl\r\n})\r\n\r\nexport default connect<mapStateToPropsLoginType,mapDispatchToPropsLoginType,{},APPStateType>(mapStateToProps, {loginTC})(Login)\r\n\r\n\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n            <p>\r\n                To log in, please, get registration <a href={'https://social-network.samuraijs.com/'}\r\n                                                       target={'_blank'}\r\n                                                       rel={\"noreferrer\"}>here</a>\r\n            </p>\r\n            <p>\r\n                or use these test account credentials:\r\n            </p>\r\n            <p>\r\n                Email: free@samuraijs.com\r\n            </p>\r\n            <p>\r\n                Password: free\r\n            </p>\r\n            </div>\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'} name={'email'}\r\n                       component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} type={'password'}\r\n                       component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={'rememberMe'} type={'checkbox'}/> remember me\r\n            </div>\r\n            {error && <div className={s.errorMessage}>\r\n                {error}\r\n            </div>}\r\n            <button>login</button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)","import React, {ChangeEvent, useState} from \"react\";\r\nimport {putStatus} from \"../../API/api\";\r\nimport s from './Settings.module.css'\r\n\r\ntype SettingsPropsType = {\r\n\r\n}\r\n\r\nexport const Settings = (props: SettingsPropsType) => {\r\n\r\n    const [status, setStatus] = useState<string>('')\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStatus = e.currentTarget.value\r\n        setStatus(newStatus)\r\n    }\r\n\r\n    const onClickHandler = (status: string) => {\r\n        putStatus(status).then(r => {\r\n            console.log('Your status was updated')\r\n        })\r\n        setStatus('')\r\n    }\r\n\r\n    const onClickUpdatePhotoHandler = () => {\r\n        /*profileAPI.updatePhoto().then(r => {\r\n            console.log(\"Your avatar was updated with\" + r.photos.small)\r\n        })*/\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.set}>\r\n            <h3>My profile settings</h3>\r\n            <input value={status} onChange={onChangeStatusHandler}/>\r\n            <button onClick={() => onClickHandler(status)}>put new status</button>\r\n         <div>\r\n            <button onClick={() => onClickUpdatePhotoHandler()}>set new photo</button>\r\n         </div>\r\n        </div>\r\n    )\r\n}","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {APPStateType} from \"../redux-store\";\r\nimport {authMeTC} from \"./auth-reducer\";\r\n\r\n\r\nexport type AppInitType = {\r\n    isInitialized: boolean\r\n}\r\n\r\nlet initialState: AppInitType = {\r\n    isInitialized: false,\r\n}\r\n\r\n\r\nconst appReducer = (state: AppInitType = initialState, action: AllAppReducerACType): AppInitType => {\r\n\r\n    switch (action.type) {\r\n        case 'app/SET_INITIALIZED_SUCCESS': {\r\n            let a = {...state, isInitialized: true} //var is used here for an access to debugger\r\n\r\n            return a\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default appReducer;\r\n\r\ntype AllAppReducerACType = setUserDataACType\r\n\r\ntype setUserDataACType = ReturnType<typeof setAppInitializedAC>\r\n\r\nexport const setAppInitializedAC = () => {\r\n    return {\r\n        type: 'app/SET_INITIALIZED_SUCCESS',\r\n    } as const\r\n}\r\n\r\nexport const initializeTC = () => (dispatch: ThunkDispatch<APPStateType, unknown, AllAppReducerACType>) => {\r\n    const promiseAuthMe = dispatch(authMeTC())\r\n    //\r\n    //\r\n    Promise.all([promiseAuthMe])\r\n        .then(() => {\r\n            dispatch(setAppInitializedAC())\r\n        })\r\n\r\n}\r\n\r\n","import {AllACType} from \"../redux-store\";\r\n\r\nexport type FriendType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport type FriendsType = Array<FriendType>\r\n\r\nexport type FriendsBarType = {\r\n    friends: FriendsType\r\n}\r\n\r\nlet initialState: FriendsBarType = {\r\n    friends: [\r\n        {id: 1, name: \"Alex\", avatar: 'https://i.pinimg.com/originals/2c/cf/78/2ccf78dd2564d2067e0203823fa66c8c.jpg'},\r\n        {id: 2, name: \"Kate\", avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTai5liDn6mltiPfC7nIMC0a2UBVCSvzWwpdExj9YSGViP5EebCZjIwZpXFwos84J7OXzU&usqp=CAU'},\r\n        {id: 3, name: \"Bob\", avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTEH-szSsbp1TB_yT-Vhi-7QCyjAnxhNqeu0Fb9tOPwtEKMgACnq0xoadGvbpgU9dUEAlc&usqp=CAU'},\r\n        {id: 4, name: \"Hank\", avatar: 'https://www.pngkey.com/png/detail/180-1800743_hank-hill.png'},\r\n    ],\r\n}\r\n\r\nconst friendsBarReducer = (state: FriendsBarType = initialState, action: AllACType): FriendsBarType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default friendsBarReducer;\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer, {addPostAC, setUserProfile, setUserStatus, updatePhotoAC,} from \"./Reducers/profile-reducer\";\r\nimport dialogsReducer, {sendNewDialogMessageAC} from \"./Reducers/dialogs-reducer\";\r\nimport friendsBarReducer from \"./Reducers/friendsBar-reducer\";\r\nimport usersReducer, {\r\n    followAC,\r\n    followedUsersIdAC,\r\n    setCurrentPage,\r\n    setFilterAC,\r\n    setTotalUsersAmount,\r\n    setUsers,\r\n    switchPreloader,\r\n    unFollowAC,\r\n} from \"./Reducers/users-reducer\";\r\nimport authReducer from \"./Reducers/auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./Reducers/app-reducer\";\r\n\r\n\r\nexport type AllACType = ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof sendNewDialogMessageAC> |\r\n    ReturnType<typeof followAC> |\r\n    ReturnType<typeof unFollowAC> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersAmount> |\r\n    ReturnType<typeof switchPreloader> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof followedUsersIdAC> |\r\n    ReturnType<typeof setUserStatus> |\r\n    ReturnType<typeof setFilterAC> |\r\n    ReturnType<typeof updatePhotoAC>\r\n\r\nexport type APPStateType = ReturnType<typeof mainReducer>\r\n\r\nlet mainReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    friendsBar: friendsBarReducer,\r\n    usersPage: usersReducer,\r\n    authSetting: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\n//let store: Store<APPStateType, AllACType> = createStore(mainReducer, applyMiddleware(thunkMiddleware))\r\n//let store = createStore(mainReducer, applyMiddleware(thunkMiddleware))\r\n//export type AppStoreType = typeof store\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(mainReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav/Nav';\nimport {BrowserRouter, Route, Switch, withRouter} from \"react-router-dom\";\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport Login from \"./Components/Login/Login\";\nimport {Settings} from \"./Components/Settings/Settings\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeTC} from \"./redux/Reducers/app-reducer\";\nimport store, {APPStateType} from \"./redux/redux-store\";\nimport Preloader from \"./Components/common/Preloader/Preloader\";\n\ntype APPPropsType = MSTPType & MDTPType\n\ntype MSTPType = {\n    isInitialized: boolean\n}\n\ntype MDTPType = {\n    initializeTC: () => void\n}\n\nclass App extends React.Component<APPPropsType> {\n\n    componentDidMount() {\n        this.props.initializeTC()\n    }\n\n    render() {\n        if (!this.props.isInitialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n\n                <div className='app-wrapper-content'>\n                    <Nav/>\n                    <Switch>\n                        <Route path={'/profile/:userId?'}\n                               render={() => <ProfileContainer/>}/>\n                        <Route path={'/dialogs'}\n                               render={() => <DialogsContainer/>}/>\n                        {/*<Route path={'/friends'}\n                       render={() => <Friends />}/>*/}\n                        <Route path={'/users'}\n                               render={() => <UsersContainer/>}/>\n                        <Route path={'/login'}\n                               render={() => <Login/>}/>\n                        <Route path={'/settings'}\n                               render={() => <Settings/>}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: APPStateType) => ({\n    isInitialized: state.app.isInitialized\n})\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect<MSTPType, MDTPType, {}, APPStateType>(mapStateToProps, {initializeTC}))(App);\n\nexport const SocialNetworkApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {SocialNetworkApp} from './App';\n\n\nReactDOM.render(\n            <SocialNetworkApp />,\n    document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formControl_formControl__156bY\",\"error\":\"formControl_error__jp-eW\",\"errorMessage\":\"formControl_errorMessage__2mE6J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__j2i-j\",\"DialogsItems\":\"Dialogs_DialogsItems__lAOPW\",\"active\":\"Dialogs_active__1ShYH\",\"messages\":\"Dialogs_messages__1r81N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__XcAe_\",\"preloader\":\"Users_preloader__3JRwf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2oWUq\",\"status\":\"ProfileInfo_status__3ktjO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__11fPO\",\"pageNumber\":\"Pagination_pageNumber__3w8gv\",\"selectedPage\":\"Pagination_selectedPage__1NRN1\"};"],"sourceRoot":""}